sampler2D GBufferPosition: register(s0);
sampler2D GBufferNormals: register(s1);
sampler2D Texture: register(s2);
float4 unprojectionVector: register(c0);
float4 projectionParameters: register(c1);
float4 edgeDetectionParams: register(c2);
float4 screenSize: register(c3);
float4 texCoordsAdjustment: register(c4);

struct PS_INPUT
{
        float4 textureCoords: TEXCOORD0;
};

float4 main(PS_INPUT In):COLOR0
{
        In.textureCoords.xy += texCoordsAdjustment.zw;
        float2 k = float2(0.0, edgeDetectionParams.w);
        float4 sum = tex2D(Texture, In.textureCoords.xy);
        float p = DecodeZEye(tex2D(GBufferPosition, In.textureCoords.xy), projectionParameters);
        float3 n = DecodeNormal(tex2D(GBufferNormals, In.textureCoords.xy).xyz);
        float num = 1.0;

        float4 textureCoords;
        textureCoords.xy = In.textureCoords.xy;
        textureCoords.xy += k;
        float p1 = DecodeZEye(tex2D(GBufferPosition, textureCoords.xy), projectionParameters);
        float3 n1 = DecodeNormal(tex2D(GBufferNormals, textureCoords.xy).xyz);

        if(abs(p - p1) <= edgeDetectionParams.x && dot(n, n1) >= edgeDetectionParams.y)
        {
                num += 1.0;
                sum += tex2D(Texture, textureCoords.xy);
        }

        textureCoords.xy = In.textureCoords.xy;
        textureCoords.xy -= k;
        float p2 = DecodeZEye(tex2D(GBufferPosition, textureCoords.xy), projectionParameters);
        float3 n2 = DecodeNormal(tex2D(GBufferNormals, textureCoords.xy).xyz);

        if(abs(p - p2) <= edgeDetectionParams.x && dot(n, n2) >= edgeDetectionParams.y)
        {
                num += 1.0;
                sum += tex2D(Texture, textureCoords.xy);
        }
        sum /= num;
        return sum;
}
