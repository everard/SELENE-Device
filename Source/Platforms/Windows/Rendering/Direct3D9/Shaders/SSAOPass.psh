sampler2D GBufferPosition: register(s0);
sampler2D GBufferNormals: register(s1);
sampler2D RandomDirections: register(s2);
float4 unprojectionVector: register(c0);
float4 projectionParameters: register(c1);
float4 ssaoParams: register(c2);

struct PS_INPUT
{
        float4 textureCoords: TEXCOORD0;
        float4 TraceDirection: TEXCOORD1;
        float2 RTexCoords: TEXCOORD2;
};

float4 main(PS_INPUT In): COLOR0
{
        float3 p = DecodePos(tex2D(GBufferPosition, In.textureCoords.xy), In.textureCoords.zw, projectionParameters, unprojectionVector);
        float3 n = DecodeNormal(tex2D(GBufferNormals, In.textureCoords.xy).xyz);
        float3 plane = normalize(2.0 * tex2D(RandomDirections, In.RTexCoords).xyz - float3(1.0, 1.0, 1.0));
        float3 sample = reflect(In.TraceDirection, plane);

        float4 textureCoords;
        textureCoords.xy = In.textureCoords.xy + (In.TraceDirection.w * ssaoParams.x * sample.xy / p.z);
        textureCoords.zw = 2.0 * float2(textureCoords.x, -textureCoords.y) - float2(1.0, -1.0);

        float3 p1 = DecodePos(tex2D(GBufferPosition, textureCoords.xy), textureCoords.zw, projectionParameters, unprojectionVector);
        float3 dir = p1 - p;
        float DirLen = length(dir);
        dir /= DirLen;

        float norm = clamp(dot(dir, n) + ssaoParams.y, 0.0, 1.0);
        float range = 1.0 - clamp(DirLen / ssaoParams.x, 0.0, 1.0);

        float ATT = norm * range * 0.06875;
        return ATT.xxxx;
}
